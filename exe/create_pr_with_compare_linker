#!/usr/bin/env ruby

require "compare_linker"
require "git"
require "octokit"
require "optparse"

op = OptionParser.new
params = {}

op.on("", "--github-access-token TOKEN", "GitHub token for access") do |v|
  params[:token] = v
end

op.on("", "--repo-name NAME", "org/repository for bundle update") do |v|
  params[:repo_name] = v
end

op.on("", "--pr-body-file FILEPATH", "file path of description for bundle update PR") do |v|
  params[:pr_body_file] = v
end

begin
  op.parse(ARGV)
rescue OptionParser::InvalidOption => e
  $stderr.puts e.message
  $stderr.puts op
end

unless params[:token]
  $stderr.puts "--github-access-token is required. Abort.\n\n"
  $stderr.puts op
  exit(false)
end

unless params[:repo_name]
  $stderr.puts "--repo-name is required. Abort.\n"
  $stderr.puts op
  exit(false)
end

current_dir = Dir.pwd
$stdout.print "Create PR for '#{current_dir}' (Ctrl-C for Cancel) :"
$stdin.gets

branch_name    = "bundle_update_" + Date.today.strftime("%Y_%m_%d")
commit_message = "bundle update " + Date.today.strftime("%Y.%m.%d")
repo_name      = params[:repo_name]
pr_title       = commit_message
pr_body        = params[:pr_body_file] ? File.read(params[:pr_body_file]) : ""

$stdout.puts "Stash"
$stdout.puts `git stash`

local = Git.open(current_dir)

$stdout.puts "Checkout master & pull"
local.branch("master").checkout()
local.pull()

$stdout.puts "Create '#{branch_name}' branch in local"
local.branch(branch_name).checkout()

$stdout.puts "Exec bundle update..."
$stdout.puts `bundle update`
$stdout.puts "bundle update Done."
$stdout.puts
$stdout.puts "Commit as '#{commit_message}'"
local.add(["Gemfile", "Gemfile.lock"])
local.commit(commit_message)

$stdout.print "Push '#{branch_name}' to origin ? (Ctrl-C for Cancel) :"
$stdin.gets

$stdout.puts "Push to remote"
local.push("origin", branch_name)

remote = Octokit::Client.new(access_token: params[:token])

$stdout.print "Create PR ? (Ctrl-C for Cancel) :"
$stdin.gets

$stdout.puts "Create PR"
pr = remote.create_pull_request(repo_name, "master", branch_name, pr_title, pr_body)

$stdout.puts "#{pr[:html_url]} was created."
$stdout.print "Exec compare linker ? (Ctrl-C for Cancel) :"
$stdin.gets

$stdout.puts "Exec compare_linker"
compare_linker = CompareLinker.new(repo_name, pr.number)
compare_linker.formatter = CompareLinker::Formatter::Markdown.new
comment = compare_linker.make_compare_links.to_a.join("\n")
compare_linker.add_comment(repo_name, pr.number, comment)
$stdout.puts "All Done."
